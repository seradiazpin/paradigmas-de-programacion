{
  "name": "AspectJ",
  "tagline": "Tutorial de Aspectj",
  "body": "# AspectJ\r\nAspectJ es una extensión de AOP para Java.\r\nFue creado en PARC(Palo Alto Research Center) por el equipo Xerox PARC, liderado por  Gregor Kiczales.\r\nAmpliamente usado como estándar de la POA.\r\nSe caracteriza por su simplicidad y usabilidad.\r\n\r\n## Ventajas\r\n*Facilita/mejora la modularidad de los desarrollos de software.\r\n*El código es organizado y comprimido\r\n*Es reutilizable\r\n*Añade constructores a Java que permiten la implementación modular de crosscutting concerns\r\n*Permite modelar referencias transversales, extiende las capacidades de POO\\\r\n\r\n## Lenguaje\r\n### Aspect\r\nEs la unidad central de Aspectj, se puede colocar en un archivo .aj.\r\nContiene el código que expresa las reglas de los crosscutting.\r\nUn aspecto es una unidad de modularización en AOP como las clases son en OOP.\r\n\r\n```aspectj\r\n    public aspect Aspect {\r\n\t//CODIGO\r\n    }\r\n```\r\n\r\n###PointCut\r\n\r\nUna palabra del lenguaje que selecciona los puntos interesantes (join points) y colecta el contexto de este punto.\r\nSelecciona puntos interesantes de la ejecución.\r\nPueden ser llamadas, ejecuciones, instanciar objetos, constructores, manejo de excepciones.\r\n```aspectj\r\n    pointcut nombreDePunto(): execution(* Clase.metodo(..));\r\n```\r\n#### Tipos de point cuts\r\n![tabla de pointcut](https://github.com/unicorn.png).\r\n[Mas informacion](https://eclipse.org/aspectj/doc/next/progguide/index.html)\r\n\r\n###Advice\r\nCódigo que se ejecutará cuando se llegue al pointcut este se puede definir de diferentes maneras.\r\nExisten tres tipos de advice: \r\n*before ()\r\n*after ()\r\n*around ()\r\n#### Before\r\nSe ejecuta  antes de cada join point.\r\n```aspectj\r\n    before() : nombreDePunto(){\r\n        //CODIGO\r\n    }\r\n```\r\n#### After\r\nSe ejecuta después de cada join point.\r\nPuede de tres tipos:\r\n*returning\r\n*throwing\r\nY el por defecto en el cual se ejecuta sin importar si retorna o lanza una excepción.\r\n```aspectj\r\n    after(): nombreDePunto() {\r\n\t//CODIGO\r\n    }\r\n\r\n    after() returning() : nombreDePunto(){\r\n\t//CODIGO\r\n    }\r\n\r\n    after() throwing() : nombreDePunto() {\r\n\t//CODIGO\r\n    }\r\n```\r\n#### Around\r\nSe ejecuta en lugar de el join point.\r\nDebe ser declarado con un tipo de retorno.\r\nEl código del join point se puede ejecutar usando la palabra\r\n`proceed();`\r\n\r\n```aspectj\r\n    void around() : nombreDePunto() {\r\n\t//CODIGO\r\n    }\r\n    void around() : nombreDePunto() {\r\n\t//CODIGO\r\n\tproceed();\r\n\t//CODIGO\r\n    }\r\n```\r\n#### Atributos de los advice\r\n`thisJoinPoint` : Representa el join point en el cual el advice se está ejecutando.\r\n`thisJoinPointStaticPart` : equivalente a `thisJoinPoint.getStaticPart()` pero consume menos recursos.\r\n`thisEnclosingJoinPointStaticPart` : la parte estatica de la dinamica que encierra el join point.\r\n\r\n### Sintaxis de anotaciones\r\n#### @Aspect\r\n#### @PointCut\r\n#### Advice before\r\n#### Advice after\r\n#### Advice around\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}